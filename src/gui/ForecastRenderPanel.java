package gui;

import java.awt.*;
import logic.*;

// The Panel for rendering the three day forecast graph
public class ForecastRenderPanel extends BasePanel {

    private final int NUM_DAYS_TO_RENDER = 3;
    
    public ForecastRenderPanel() {
        initComponents();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g); // This will ensure the previous background gets erased
        
        // Paint the background
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, frame.getWidth(), frame.getHeight() - 90);
        
        // Call an additonal method (defined below) to render each day
        for (int i = 0; i < NUM_DAYS_TO_RENDER; i++) {
            renderDay(g, i);
        }
    }
    
    public void renderDay(Graphics g, int dayIndex) {
        
        // Get a reference to the Day object, for accessing our data
        Day day = app.getDay(dayIndex);
        
        // Render the date
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.BOLD, 14));
        g.drawString(day.getDateString(), dayIndex*100+20, 300);
        
        // Render the bar for the high temperature
        g.setColor(Color.RED);
        int width = 20;
        int height = day.getHigh()*5; // assumes we're using 5 pixels per degree
        int x = dayIndex*100+30;
        int y = 280 - height;
        g.fillRect(x, y, width, height);
        
        // Render the label for the high temperature
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", 0, 10));
        g.drawString(""+day.getHigh(), x+3, y-4);
        
        // Render the bar for the low temperature
        g.setColor(Color.BLUE);
        width = 20;
        height = day.getLow()*5;
        x = dayIndex*100+50;
        y = 280 - height;
        g.fillRect(x, y, width, height);
        
        // Render the label for the low temperature
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", 0, 10));
        g.drawString(""+day.getLow(), x+3, y-4);
    }
     
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(322, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        frame.switchToPanel(new AppPanel());
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
